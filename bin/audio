#!/usr/bin/env python3

# Developed by Nalin Ahuja, nalinahuja22

# End Header-------------------------------------------------------------------------------------------------------------------------------------------------------

import sys

import pyaudio as pa
import audioop as ap

from time import time
from gpiozero import RGBLED
from colorzero import Color

# End Imports------------------------------------------------------------------------------------------------------------------------------------------------------

# Process Lock
LOCK = "./.lock"

# Audio Constants
RATE = 33075
CHUNK = 2048
RANGE = 1000

# Time Constants
CONV = 16.67
B_TIME = 3.75

# Animation Constants
DIFF = 42.5
DECR = 0.80

# End Defined Constants--------------------------------------------------------------------------------------------------------------------------------------------

def mtime():
    # Return Current Time In Milliseconds
    return (int(time() * 1000))

def norm(value, min, max):
    # Normalize Input Value To Range [0, 1]
    return ((value - min) / (max - min + 1))

def pdiff(v1, v2):
    # Compute Percent Difference Between Input Values
    return (abs(v1 - v2) / ((v1 + v2 + 1) / 2) * 100)

# End Helper Functions---------------------------------------------------------------------------------------------------------------------------------------------

def init_leds():
    # Initialze GPIO Pins
    rgb = RGBLED(17, 22, 27)

    # Initialze Audio Interface
    source = pa.PyAudio()

    # Create Audio Stream
    stream = source.open(format = pa.paInt16, channels = 2, rate = RATE, input = True, frames_per_buffer = CHUNK)

    # Return Packed Data
    return (stream, rgb)

# End LED Initialzer Function--------------------------------------------------------------------------------------------------------------------------------------

def animate_leds(stream, rgb):
    # Create Process Lock
    lck = open(LOCK, "w")

    # Initialize Volume
    vscore = 0

    # Initialize Frame Buffer
    vframes = []

    # Initialize Frame Buffer Limit
    vflen = int(B_TIME * CONV)

    # Initalize Last Audio Peak
    lpeak = mtime()

    # Process Audio Stream
    while (True):
        # Set LED Color
        if (vscore < 150):
            rgb.color = Color("red")
        elif (vscore > 150 and vscore < 350):
            rgb.color = Color("green")
        elif (vscore > 350 and vscore < 650):
            rgb.color = Color("blue")
        elif (vscore > 650 and vscore < 850):
            rgb.color = Color("purple")
        elif (vscore > 850):
            rgb.color = Color("white")

        # Read Stream Chunk
        data = stream.read(CHUNK)

        # Calculate Instantaneous Volume
        rms = ap.rms(data, 2)

        # Maintain Frame Buffer
        if (len(vframes) == vflen):
            vframes.pop(0)

        # Extend Frame Buffer
        vframes.append(rms)

        # Trim Frame Buffer To Length
        tvframes = vframes[(abs(len(vframes) - vflen)):]

        # Error Check Length
        if (len(tvframes) == 0):
            tvframes = vframes

        # Normalize Instantaneous Volume
        rms = norm(rms, min(tvframes), max(tvframes)) * RANGE

        # Set Instantaneous Volume
        if (pdiff(vscore, rms) > DIFF):
            if (vscore <= rms):
                # Get New Audio Peak
                cpeak = mtime()

                # Update Frame Buffer Multiplier
                vflen = int((pow(2, (((cpeak - lpeak) / 1000))) + B_TIME) * CONV)

                # Update Last Audio Peak
                lpeak = cpeak

                # Set Volume
                vscore = rms
            else:
                # Decay Volume
                vscore *= DECR

        # Error Correct Volume
        if (vscore < 1):
            # Update Last Audio Peak
            lpeak = mtime()

            # Set To Minimum
            vscore = 0

        # Check Process Lock
        lck = open(LOCK, "r")

# End LED Animation Function---------------------------------------------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    # Start LED Control Loop
    while (True):
        # Initialize LEDs
        stream, rgb = init_leds()

        # Start LED Animation
        try:
            animate_leds(stream, rgb)
        except (KeyboardInterrupt, FileNotFoundError):
            sys.exit()
        except Exception as e:
            print(e)

# End File---------------------------------------------------------------------------------------------------------------------------------------------------------
