#!/usr/bin/env bash

# Developed by Nalin Ahuja, nalinahuja

# End Header-------------------------------------------------------------------------------------------------------------------------------------------------------

# Boolean Values
declare TRUE=1 FALSE=0

# Numerical Constants
declare NSET=0 IDLE=1 TWAIT=10 TSLEEP=0.25

# Program Paths
declare AUDIO_AGENT=./audio CONNECTION_AGENT=./a2dp AUDIO_LOCK=./.lock

# Asset Paths
declare DEVICE_CONNECTED=./assets/device-connected.wav DEVICE_DISCONNECTED=./assets/device-disconnected.wav

# End Defined Constants--------------------------------------------------------------------------------------------------------------------------------------------

# Initialize Exit Flag
declare exit_flag=${FALSE}

# Initialize Process Indicators
declare led_on=${TRUE} paired=${FALSE} playback=${FALSE} audio_loopback=${NSET}

# End Global Variables---------------------------------------------------------------------------------------------------------------------------------------------

function log_event() {
  # Print Event Message
  command echo -e "[event - $(command date +"%T")] - ${@}"
}

# End Log Functions------------------------------------------------------------------------------------------------------------------------------------------------

function show_output() {
  # Enable Terminal Output
  command stty echo 2> /dev/null

  # Set Cursor To Visible
  command tput cnorm 2> /dev/null
}

function hide_output() {
  # Disable Terminal Output
  command stty -echo 2> /dev/null

  # Set Cursor To Hidden
  command tput civis 2> /dev/null
}

function exit_processes() {
  # Set Exit Flag To True
  exit_flag=${TRUE}
}

# End Environment Functions----------------------------------------------------------------------------------------------------------------------------------------

function lightwave() {
  # Disable Terminal Output
  hide_output

  # Start Bluetooth Service Manager
  manage_service &

  # Start Bluetooth Connection Manager
  manage_connections
}

function manage_service() {
  # Log Program Event
  log_event "Starting Service Manager"

  # Start Connection Agent
  command ${CONNECTION_AGENT} &> /dev/null &

  # Store Connection Agent PID
  local pid=$!

  # Monitor Service Status
  while [[ 1 ]]; do
    # Get Bluetooth Service Status
    local status=$(sudo systemctl status bluetooth)

    # Determine Service Status
    if [[ ! -z $(command echo -e "${status}" | command grep "Active" | command grep "failed") || ${exit_flag} == ${TRUE} ]]
    then
      # Kill Connection Agent
      command kill ${pid} &> /dev/null

      # Check Exit Flag
      if [[ ${exit_flag} == ${TRUE} ]]
      then
        # Log Program Event
        log_event "Stopping Services"

        # Enable Terminal Output
        show_output

        # Break Loop
        break
      else
        # Log Program Event
        log_event "Restarting Services"
      fi

      # Start Bluetooth Service
      sudo systemctl start bluetooth

      # Restart Connection Agent
      command ${CONNECTION_AGENT} &> /dev/null &

      # Update Connection Agent PID
      pid=$!
    fi

    # Sleep For A Bit
    command sleep ${TSLEEP}
  done
}

function manage_connections() {
  # Log Program Event
  log_event "Starting Connection Manager"

  # Load ALSA Loop Back Interface
  sudo modprobe snd-aloop

  # Monitor Bluetooth Interface
  while [[ 1 ]]; do
    # Check Exit Flag Before Doing Anything
    if [[ ${exit_flag} == ${TRUE} ]]
    then
      # Log Program Event
      log_event "Dropping Connections"

      # Kill Audio Process
      command rm ${AUDIO_LOCK} &> /dev/null

      # Play Disconnect Noise
      command aplay ${DEVICE_DISCONNECTED} &> /dev/null

      # Unload Loopback Module
      command pactl unload-module ${audio_loopback} &> /dev/null

      # Reset Indicators
      led_on=${TRUE}; paired=${FALSE}; playback=${FALSE}; audio_loopback=${NSET}

      # Enable Terminal Output
      show_output

      # Break Loop
      break
    fi

    # Get Number Of Bluetooth Connections
    local connections=$(command hcitool con | command wc -l)

    # Determine Action
    if [[ ${connections} != ${IDLE} ]]
    then
      # Get Playback And Capture Devices
      local play=$(command pactl list sources short)
      local capt=$(command pactl list sinks short)

      # Get Loopback Interface Components
      local play_dev=$(command echo -e "${play}" | command grep "bluez" | command awk '{print $1}')
      local capt_dev=$(command echo -e "${capt}" | command grep "aloop" | command awk '{print $1}')

      # Accept Bluetooth Connection
      if [[ ${paired} == ${FALSE} && ! -z ${play_dev} && ! -z ${capt_dev} ]]
      then
        # Log Program Event
        log_event "Accepting Connection"

        # Play Connect Noise
        command aplay ${DEVICE_CONNECTED} &> /dev/null

        # Set Indicators
        paired=${TRUE}; playback=${TRUE}

        # Get Loopback Index
        audio_loopback=$(command pactl load-module module-loopback source=${play_dev} sink=${capt_dev})

        # Initialize Start And Current Times
        local stime=$(command date -u +%s)
        local ctime=${stime}

        # Wait For A Bit
        while [[ $((${ctime} - ${stime})) -lt ${TWAIT} && ${led_on} == ${TRUE} ]]; do
          # Disable LEDs If Audio Played
          if [[ -z $(command pactl list sources short | command grep "bluez" | command grep "SUSPENDED") ]]
          then
            led_on=${FALSE}
          fi

          # Update Current Time
          ctime=$(command date -u +%s)

          # Sleep For A Bit
          command sleep ${TSLEEP}
        done

        # Check Activation Indicator
        if [[ ${led_on} == ${TRUE} ]]
        then
          # Start Audio Process
          command ${AUDIO_AGENT} &> /dev/null &
        fi

      # Manage Bluetooth Connection
      elif [[ ${paired} == ${TRUE} ]]
      then
        # Unmap Audio Connection
        if [[ ${playback} == ${TRUE} && -z ${play_dev} ]]
        then
          # Log Program Event
          log_event "Halting Audio Playback"

          # Kill Audio Process
          command rm ${AUDIO_LOCK} &> /dev/null

          # Unload Loopback Module
          command pactl unload-module ${audio_loopback} &> /dev/null

          # Reset Indicators
          playback=${FALSE}; audio_loopback=${NSET}

        # Remap Audio Connection
        elif [[ ${playback} == ${FALSE}  && ! -z ${play_dev} ]]
        then
          # Log Program Event
          log_event "Resuming Audio Playback"

          # Set Indicators
          playback=${TRUE}

          # Load Loopback Module
          audio_loopback=$(command pactl load-module module-loopback source=${play_dev} sink=${capt_dev})

          # Check Activation Indicator
          if [[ ${led_on} == ${TRUE} ]]
          then
            # Start Audio Process
            command ${AUDIO_AGENT} &> /dev/null &
          fi
        fi
      fi

    # Kill Bluetooth Connection
    elif [[ ${connections} == ${IDLE} && ${paired} == ${TRUE} ]]
    then
      # Log Program Event
      log_event "Dropping Connection"

      # Kill Audio Process
      command rm ${AUDIO_LOCK} &> /dev/null

      # Play Disconnect Noise
      command aplay ${DEVICE_DISCONNECTED} &> /dev/null

      # Reset Indicators
      led_on=${TRUE}; paired=${FALSE}; playback=${FALSE}; audio_loopback=${NSET}

      # Unload Loopback Module
      command pactl unload-module ${audio_loopback} &> /dev/null
    fi

    # Sleep For A Bit
    command sleep ${TSLEEP}
  done
}

# End Subroutine Functions-----------------------------------------------------------------------------------------------------------------------------------------

# Log Program Event
log_event "Starting System Services"

# Stop Bluetooth Service
sudo systemctl stop bluetooth

# Stop Pulse Audio Service
command pulseaudio --kill &> /dev/null

# Add User To Group
sudo usermod -a -G lp pi

# Start Bluetooth Service
sudo bluetoothctl &> /dev/null << EOF
power on
pairable on
discoverable on
exit
EOF

# Start Pulse Audio Service
command pulseaudio --start &> /dev/null

# Set Exit Global To True On SIGINT
command trap exit_processes SIGINT &> /dev/null

# Call Service Wrapper Function
lightwave

# End Lightwave Manager--------------------------------------------------------------------------------------------------------------------------------------------
