#!/usr/bin/env bash

# Developed by Nalin Ahuja, nalinahuja

# Boolean Values
readonly TRUE=1 FALSE=0

# Numerical Constants
readonly NSET=0 IDLE=1 ACTIVE=0

# Time Constants
readonly DELAY_PERIOD=1 WAIT_PERIOD=10 REFRESH_INTERVAL=0.10

# Program File Paths
readonly AUDIO_AGENT=./audio.py SERVICE_AGENT=./a2dp.py AUDIO_LOCK=./.lock

# Audio Asset Paths
readonly DEVICE_CONNECTED=./assets/device-connected.wav DEVICE_DISCONNECTED=./assets/device-disconnected.wav

# End Defined Constants--------------------------------------------------------------------------------------------------------------------------------------------------------------

# Initialize Program Flags
declare bluetooth_paired=${FALSE} audio_playback=${FALSE} audio_loopback=${NSET} led_active=${TRUE} exit_main=${FALSE}

# End Global Variables---------------------------------------------------------------------------------------------------------------------------------------------------------------

function show_output() {
  # Enable Terminal Output
  command stty echo 2> /dev/null

  # Set Cursor To Visible
  command tput cnorm 2> /dev/null
}

function hide_output() {
  # Disable Terminal Output
  command stty -echo 2> /dev/null

  # Set Cursor To Hidden
  command tput civis 2> /dev/null
}

function log_event() {
  # Print Event Message
  command echo -e "[event - $(command date +"%T")] - ${@}"
}

# End Interface Functions------------------------------------------------------------------------------------------------------------------------------------------------------------

function exit_managers() {
  # Set Exit Flag To True
  exit_main=${TRUE}
}

function manage_service() {
  # Log Program Event
  log_event "Starting Service Manager"

  # Start Service Agent In Background
  command python3 ${SERVICE_AGENT} &> /dev/null &

  # Monitor Bluetooth Service
  while [[ 1 ]]; do
    # Check Exit Flag Before Doing Anything
    if [[ ${exit_main} == ${TRUE} ]]
    then
        # Log Program Event
        log_event "Stopping Services"

        # Enable Terminal Output
        show_output

        # Break Service Manager Loop
        break
    fi

    # Get Bluetooth Service Status
    command sudo systemctl --quiet is-active bluetooth

    # Check If Bluetooth Service Is Active
    if [[ ${?} != ${ACTIVE} ]]
    then
      # Log Program Event
      log_event "Restarting Services"

      # Start Service Agent In Background
      command python3 ${SERVICE_AGENT} &> /dev/null &
    fi

    # Sleep For A Bit
    command sleep ${REFRESH_INTERVAL}
  done
}

function manage_connections() {
  # Log Program Event
  log_event "Starting Connection Manager"

  # Load ALSA Loop Back Interface
  command sudo modprobe snd-aloop

  # Monitor Bluetooth Connections
  while [[ 1 ]]; do
    # Check Exit Flag Before Doing Anything
    if [[ ${exit_main} == ${TRUE} ]]
    then
      # Log Program Event
      log_event "Terminating Connection"

      # Kill Audio Process Lock
      command rm ${AUDIO_LOCK} &> /dev/null

      # Play Disconnect Noise
      command aplay ${DEVICE_DISCONNECTED} &> /dev/null

      # Unload Loopback Module
      command pactl unload-module ${audio_loopback} &> /dev/null

      # Reset Program Flags
      bluetooth_paired=${FALSE}; audio_playback=${FALSE}; audio_loopback=${NSET}; led_active=${TRUE}

      # Enable Terminal Output
      show_output

      # Break Connection Manager Loop
      break
    fi

    # Get Number Of Bluetooth Connections
    local num_connections=$(command hcitool con | command wc -l)

    # Determine Action
    if [[ ${num_connections} != ${IDLE} && ${bluetooth_paired} == ${FALSE} ]]
    then
      # Get Playback And Capture Devices
      local play=$(command pactl list sources short)
      local capt=$(command pactl list sinks short)

      # Get Loopback Interface Devices
      local play_dev=$(command echo -e "${play}" | command grep "bluez" | command awk '{print $1}')
      local capt_dev=$(command echo -e "${capt}" | command grep "aloop" | command awk '{print $1}')

      # Accept Bluetooth Connection
      if [[ ${bluetooth_paired} == ${FALSE} && -n ${play_dev} && -n ${capt_dev} ]]
      then
        # Log Program Event
        log_event "Accepting Connection"

        # Play Connect Noise
        command aplay ${DEVICE_CONNECTED} &> /dev/null

        # Set Program Flags
        bluetooth_paired=${TRUE}; audio_playback=${TRUE}; audio_loopback=$(command pactl load-module module-loopback source=${play_dev} sink=${capt_dev})

        # Initialize Start And Current Times
        local stime=$(command date -u +%s)
        local ctime=${stime}

        # Listen For Audio Playback During Wait Period
        while [[ $((${ctime} - ${stime})) -lt ${WAIT_PERIOD} ]]; do
          # Check For Audio Playback
          if [[ -z $(command pactl list sources short | command grep "bluez" | command grep "SUSPENDED") ]]
          then
            # Update Program Flag
            led_active=${FALSE}

            # Break Listening Loop
            break
          fi

          # Update Current Time
          ctime=$(command date -u +%s)

          # Sleep For A Bit
          command sleep ${REFRESH_INTERVAL}
        done

        # Check Program Flag
        if [[ ${led_active} == ${TRUE} ]]
        then
          # Start Audio Agent In Background
          command python3 ${AUDIO_AGENT} &> /dev/null &
        fi

      # Manage Bluetooth Connection
      elif [[ ${bluetooth_paired} == ${TRUE} ]]
      then
        # Unmap Audio Connection
        if [[ ${audio_playback} == ${TRUE} && -z ${play_dev} ]]
        then
          # Log Program Event
          log_event "Halting Audio Playback"

          # Kill Audio Process
          command rm ${AUDIO_LOCK} &> /dev/null

          # Unload Loopback Module
          command pactl unload-module ${audio_loopback} &> /dev/null

          # Reset Program Flags
          audio_playback=${FALSE}; audio_loopback=${NSET}

        # Remap Audio Connection
        elif [[ ${audio_playback} == ${FALSE}  && -n ${play_dev} ]]
        then
          # Log Program Event
          log_event "Resuming Audio Playback"

          # Set Program Flags
          audio_playback=${TRUE}; audio_loopback=$(command pactl load-module module-loopback source=${play_dev} sink=${capt_dev})

          # Check Program Flag
          if [[ ${led_active} == ${TRUE} ]]
          then
            # Start Audio Agent In Background
            command python3 ${AUDIO_AGENT} &> /dev/null &
          fi
        fi
      fi

    # Kill Bluetooth Connection
    elif [[ ${num_connections} == ${IDLE} && ${bluetooth_paired} == ${TRUE} ]]
    then
      # Log Program Event
      log_event "Dropping Connection"

      # Kill Audio Process
      command rm ${AUDIO_LOCK} &> /dev/null

      # Play Disconnect Noise
      command aplay ${DEVICE_DISCONNECTED} &> /dev/null

      # Unload Loopback Module
      command pactl unload-module ${audio_loopback} &> /dev/null

      # Reset Program Flags
      bluetooth_paired=${FALSE}; audio_playback=${FALSE}; audio_loopback=${NSET}; led_active=${TRUE}
    fi

    # Sleep For A Bit
    command sleep ${REFRESH_INTERVAL}
  done
}

# End Subroutine Functions-----------------------------------------------------------------------------------------------------------------------------------------------------------

# Add Root User To Group Service
command sudo usermod -a -G lp pi

# Set Exit Global To True On SIGINT
command trap exit_managers SIGINT

# Disable Terminal Output
hide_output

# Start Bluetooth Service Manager
manage_service &

# Delay Bluetooth Connection Manager
command sleep ${DELAY_PERIOD}

# Start Bluetooth Connection Manager
manage_connections

# End Lightwave Manager--------------------------------------------------------------------------------------------------------------------------------------------------------------